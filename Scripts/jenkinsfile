pipeline {
    agent none
                   /*    rtServer (
                                    id: "Artifactory-jfrog",
                                    url: "http://10.147.17.23:8081/artifactory",
                                    // using Artifacts username and password:
                                    username: "admin",
                                    password: "Computer1!"
                                        bypassProxy: true
                                    // Configure the connection timeout (in seconds).
                                    // The default value (if not configured) is 300 seconds:
                                    timeout = 300
                                ) */
              
    stages {
        stage ('checkout') {
            steps{
             checkout scm
            }
        }
        stage('Build') {    //maven build
            steps {
                echo 'Building..'
             //  sh 'mvn clean install'
                //sh label: '', script: '''mvn clean install'''
               sh 'bash ./Scripts/build.sh' // builds jar using build script
            }
        }
            stage('Test') {
             steps {
            echo 'Testing..'
           node('docker'){
                def remote = [:]
                remote.name = 'docker'
                remote.host = '10.147.17.212'
                remote.user = 'root'
                remote.password = 'Computer1!'
                remote.allowAnyHosts = true
            //deploy to docker container to test the functionality of the server
            writeFile file: '/Script/test.sh', text: 'ls -lrt'
            sshScript remote: remote, script: "test.sh"
    
             } 
        }
        }
        stage('Deploy') {
            steps {
            echo 'Deploying....'
            // deploy to artifactory for release..
            }
        }
//upload to artifact
        /*stage ('upload') {
            steps{
                gitlabCommitStatus("upload") {
                    
                    def server = Artifactory.server "admin@10.147.17.23"
                    def buildInfo = Artifactory.newBuildInfo()
                    buildInfo.env.capture = true
                    buildInfo.env.collect()

                        def uploadSpec = """{
                        "files": [
                        {
                            "pattern": "**//*target/*.jar",
                            "target": "libs-snapshot-local"
                        }, {
                            "pattern": "**//*target/*.pom",
                            "target": "libs-snapshot-local"
                        }, {
                            "pattern": "**//*target/*.war",
                            "target": "libs-snapshot-local"
                        }
                        ]
                    }"""
                    // Upload to Artifactory.
                    server.upload spec: uploadSpec, buildInfo: buildInfo

                    buildInfo.retention maxBuilds: 10, maxDays: 7, deleteBuildArtifacts: true
                    // Publish build info.
                    server.publishBuildInfo buildInfo
                }
            }*/
        }
 
        
        post { 
            always { 
                cleanWs() //clean Workspace
            }
        }
    }